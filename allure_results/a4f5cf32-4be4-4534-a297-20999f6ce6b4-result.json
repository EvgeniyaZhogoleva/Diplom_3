{"name": "Переход в раздел «История заказов»", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <p class=\"AppHeader_header__linkText__3q_va ml-2\">...</p> is not clickable at point (935, 44). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=127.0.6533.73)\nStacktrace:\n\tGetHandleVerifier [0x00007FF763A59632+30946]\n\t(No symbol) [0x00007FF763A0E3C9]\n\t(No symbol) [0x00007FF763906FDA]\n\t(No symbol) [0x00007FF76395FEEE]\n\t(No symbol) [0x00007FF76395D962]\n\t(No symbol) [0x00007FF76395AE7B]\n\t(No symbol) [0x00007FF76395A095]\n\t(No symbol) [0x00007FF76394C271]\n\t(No symbol) [0x00007FF76397CA6A]\n\t(No symbol) [0x00007FF76394BBB6]\n\t(No symbol) [0x00007FF76397CC80]\n\t(No symbol) [0x00007FF76399B041]\n\t(No symbol) [0x00007FF76397C813]\n\t(No symbol) [0x00007FF76394A6E5]\n\t(No symbol) [0x00007FF76394B021]\n\tGetHandleVerifier [0x00007FF763B8F83D+1301229]\n\tGetHandleVerifier [0x00007FF763B9BDB7+1351783]\n\tGetHandleVerifier [0x00007FF763B92A03+1313971]\n\tGetHandleVerifier [0x00007FF763A8DD06+245686]\n\t(No symbol) [0x00007FF763A1758F]\n\t(No symbol) [0x00007FF763A13804]\n\t(No symbol) [0x00007FF763A13992]\n\t(No symbol) [0x00007FF763A0A3EF]\n\tBaseThreadInitThunk [0x00007FFEF0B57374+20]\n\tRtlUserThreadStart [0x00007FFEF1F5CC91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"341d867e6daba4e216229d2273af7eed\")>\n\n    @pytest.fixture\n    def login(driver):\n        driver.get(Url.BASE_URL)\n        main_page = MainPage(driver)\n>       main_page.click_to_button_personal_account()\n\nconftest.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page.py:14: in click_to_button_personal_account\n    self.click_to_element(MainPageLocators.BUTTON_PERSONAL_ACCOUNT)\npages\\base_page.py:23: in click_to_element\n    self.find_element_with_wait(locator).click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B8AFDD7500>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF763A0A3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEF0B57374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFEF1F5CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <p class=\"AppHeader_header__linkText__3q_va ml-2\">...</p> is not clickable at point (935, 44). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\nE         (Session info: chrome=127.0.6533.73)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF763A59632+30946]\nE       \t(No symbol) [0x00007FF763A0E3C9]\nE       \t(No symbol) [0x00007FF763906FDA]\nE       \t(No symbol) [0x00007FF76395FEEE]\nE       \t(No symbol) [0x00007FF76395D962]\nE       \t(No symbol) [0x00007FF76395AE7B]\nE       \t(No symbol) [0x00007FF76395A095]\nE       \t(No symbol) [0x00007FF76394C271]\nE       \t(No symbol) [0x00007FF76397CA6A]\nE       \t(No symbol) [0x00007FF76394BBB6]\nE       \t(No symbol) [0x00007FF76397CC80]\nE       \t(No symbol) [0x00007FF76399B041]\nE       \t(No symbol) [0x00007FF76397C813]\nE       \t(No symbol) [0x00007FF76394A6E5]\nE       \t(No symbol) [0x00007FF76394B021]\nE       \tGetHandleVerifier [0x00007FF763B8F83D+1301229]\nE       \tGetHandleVerifier [0x00007FF763B9BDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF763B92A03+1313971]\nE       \tGetHandleVerifier [0x00007FF763A8DD06+245686]\nE       \t(No symbol) [0x00007FF763A1758F]\nE       \t(No symbol) [0x00007FF763A13804]\nE       \t(No symbol) [0x00007FF763A13992]\nE       \t(No symbol) [0x00007FF763A0A3EF]\nE       \tBaseThreadInitThunk [0x00007FFEF0B57374+20]\nE       \tRtlUserThreadStart [0x00007FFEF1F5CC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1722006550624, "stop": 1722006550624, "uuid": "b1753483-29c6-4aff-a877-4e7df4149cf6", "historyId": "876e59a697434a639b9b3b8ab94e02b8", "testCaseId": "e8c6c28c2bda969c354b9fa9f4a912f8", "fullName": "tests.test_personal_account.TestPersonalAccount#test_go_to_order_history_section", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_personal_account"}, {"name": "subSuite", "value": "TestPersonalAccount"}, {"name": "host", "value": "LAPTOP-IIEM2BC4"}, {"name": "thread", "value": "15424-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_personal_account"}]}